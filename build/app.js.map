{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","js/errorHandler.js","app.js","js/graph.js","js/main.js","js/tree.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","showError","error","status","Dropbox","ApiError","INVALID_TOKEN","NOT_FOUND","OVER_QUOTA","RATE_LIMITED","NETWORK_ERROR","INVALID_PARAM","OAUTH_ERROR","INVALID_METHOD",2,"getReadableFileSizeString","fileSizeInBytes","byteUnits","Math","max","toFixed","DGraph","root","this","hue","d3","scale","category10","luminance","sqrt","domain","clamp","range","initialize","prototype","constructor","margin","top","right","bottom","left","radius","min","tip","attr","direction","offset","html","d","name","size","svg","select","append","partition","layout","sort","b","ascending","PI","arc","startAngle","x","endAngle","dx","depth","innerRadius","outerRadius","value","center","Center","zoomOut","bind","path","selectAll","update","self","frameElement","style","zoomIn","p","parent","children","zoomToRoot","insideArc","key","outsideArc","outsideAngle","arcTween","interpolate","_current","that","updateArc","document","documentElement","__transition__","enterArc","exitArc","linear","data","nodes","slice","transition","duration","event","altKey","each","exit","attrTween","remove","enter","fill","on","show","hide","c","lab","forEach","_children","__children","rootNode","dataRoot","onClick","text","centerFolderName","centerFolderSize","centerLinkGroup","centerLink","datum","trunc","getPath",3,"authenticate","client","interactive","isAuthenticated","loadGraph","$","click","totalBytes","getAccountInfo","accountInfo","usedQuota","console","log","tree","Tree","loadDelta","undefined","setTimeout","finalizeChart","currentProgress","loadChartStep","progress","round","css","missingBytes","now","Date","lastTime","addChild","computeSize","pruneSmallFiles","MAX_NUM_LEAVES","publishChildren","graph","removeChild","Client","host","window","location","protocol","ready","toggle","preventDefault","animate","scrollTop","height","followPath","method","attrib","newNode","folders","split","node","getNode","addNode","pop","addFolder","addFile","cursor","done","currentBytes","counter","delta","err","result","changes","item","stat","isFolder","shouldPullAgain","cursorTag","String","endCharsToShow","substr","./errorHandler","./graph","./tree",4,"uniqueItemId","Leaf","leaves","dict","__removedSmallChildren","__smallChildrenContainer","push","leaf","child","splice","indexOf","getXLargestChildrenSize","childIndex","sizes","map","compf","reAddSmallFiles","Array","apply","numChildren","threshold","totalSize"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * Created by Johannes on 02.12.2014.\r\n */\r\n\"use strict\";\r\n\r\nvar showError = function(error) {\r\n    switch (error.status) {\r\n        case Dropbox.ApiError.INVALID_TOKEN:\r\n            // If you're using dropbox.js, the only cause behind this error is that\r\n            // the user token expired.\r\n            // Get the user through the authentication flow again.\r\n            break;\r\n\r\n        case Dropbox.ApiError.NOT_FOUND:\r\n            // The file or folder you tried to access is not in the user's Dropbox.\r\n            // Handling this error is specific to your application.\r\n            break;\r\n\r\n        case Dropbox.ApiError.OVER_QUOTA:\r\n            // The user is over their Dropbox quota.\r\n            // Tell them their Dropbox is full. Refreshing the page won't help.\r\n            break;\r\n\r\n        case Dropbox.ApiError.RATE_LIMITED:\r\n            // Too many API requests. Tell the user to try again later.\r\n            // Long-term, optimize your code to use fewer API calls.\r\n            break;\r\n\r\n        case Dropbox.ApiError.NETWORK_ERROR:\r\n            // An error occurred at the XMLHttpRequest layer.\r\n            // Most likely, the user's network connection is down.\r\n            // API calls will not succeed until the user gets back online.\r\n            break;\r\n\r\n        case Dropbox.ApiError.INVALID_PARAM:\r\n        case Dropbox.ApiError.OAUTH_ERROR:\r\n        case Dropbox.ApiError.INVALID_METHOD:\r\n        default:\r\n        // Caused by a bug in dropbox.js, in your application, or in Dropbox.\r\n        // Tell the user an error occurred, ask them to refresh the page.\r\n    }\r\n};\r\n\r\nmodule.exports = showError;",null,"/**\r\n * Created by Johannes on 02.12.2014.\r\n */\r\n\"use strict\";\r\n\r\n\r\nvar DGraph = function(root){\r\n\r\n    this.root = root;\r\n\r\n    this.hue = d3.scale.category10();\r\n\r\n    this.luminance = d3.scale.sqrt()\r\n        .domain([0, 1e7])\r\n        .clamp(true)\r\n        .range([90, 20]);\r\n\r\n    this.initialize();\r\n};\r\n\r\nDGraph.prototype = {\r\n    constructor: DGraph,\r\n\r\n    initialize: function(){\r\n        var margin = {top: 350, right: 480, bottom: 350, left: 480},\r\n        radius = Math.min(margin.top, margin.right, margin.bottom, margin.left) - 10;\r\n\r\n        this.tip = d3.tip()\r\n            .attr('class', 'd3-tip')\r\n            .direction('w')\r\n            .offset([0,-5])\r\n            .html(function(d) {\r\n                return d.name + \": \"+ getReadableFileSizeString(d.size);\r\n            });\r\n\r\n        var svg = d3.select(\"#content\").append(\"svg\")\r\n            .call(this.tip)\r\n            .attr(\"width\", margin.left + margin.right)\r\n            .attr(\"height\", margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n        this.partition = d3.layout.partition()\r\n            .sort(function (a, b) {\r\n                return d3.ascending(a.size, b.size);\r\n            })\r\n            .size([2 * Math.PI, radius]);\r\n\r\n        this.arc = d3.svg.arc()\r\n            .startAngle(function (d) {\r\n                return d.x;\r\n            })\r\n            .endAngle(function (d) {\r\n                return d.x + d.dx - .01 / (d.depth + .5);\r\n            })\r\n            .innerRadius(function (d) {\r\n                return radius / 3 * d.depth;\r\n            })\r\n            .outerRadius(function (d) {\r\n                return radius / 3 * (d.depth + 1) - 1;\r\n            });\r\n\r\n        // Compute the initial layout on the entire tree to sum sizes.\r\n        // Also compute the full name and fill color for each node,\r\n        // and stash the children so they can be restored as we descend.\r\n        this.partition\r\n            .value(function (d) {\r\n                return d.size;\r\n            })\r\n\r\n        this.center = new DGraph.Center(svg.append(\"g\"), this.root, radius, this.zoomOut.bind(this));\r\n        this.path = svg.selectAll(\"path\");\r\n\r\n        this.update();\r\n\r\n        d3.select(self.frameElement).style(\"height\", margin.top + margin.bottom + \"px\");\r\n    },\r\n\r\n    zoomIn: function(p) {\r\n        if (p.depth > 1) p = p.parent;\r\n        if (!p.children) return;\r\n        this.zoomToRoot(p, p);\r\n    },\r\n\r\n    zoomOut: function(p) {\r\n        if (!p.parent) return;\r\n        this.zoomToRoot(p.parent, p);\r\n    },\r\n\r\n    // Zoom to the specified new root.\r\n    zoomToRoot: function(root, p) {\r\n        if (document.documentElement.__transition__) return;\r\n\r\n        // Rescale outside angles to match the new layout.\r\n        var enterArc,\r\n            exitArc,\r\n            outsideAngle = d3.scale.linear().domain([0, 2 * Math.PI]);\r\n\r\n        function insideArc(d) {\r\n            return p.key > d.key\r\n                ? {depth: d.depth - 1, x: 0, dx: 0} : p.key < d.key\r\n                ? {depth: d.depth - 1, x: 2 * Math.PI, dx: 0}\r\n                : {depth: 0, x: 0, dx: 2 * Math.PI};\r\n        }\r\n\r\n        function outsideArc(d) {\r\n            return {depth: d.depth + 1, x: outsideAngle(d.x), dx: outsideAngle(d.x + d.dx) - outsideAngle(d.x)};\r\n        }\r\n\r\n        this.center.update(root);\r\n\r\n        // When zooming in, arcs enter from the outside and exit to the inside.\r\n        // Entering outside arcs start from the old layout.\r\n        if (root === p) enterArc = outsideArc, exitArc = insideArc, outsideAngle.range([p.x, p.x + p.dx]);\r\n\r\n        this.path = this.path.data(this.partition.nodes(root).slice(1), function (d) {\r\n            return d.key;\r\n        });\r\n\r\n        // When zooming out, arcs enter from the inside and exit to the outside.\r\n        // Exiting outside arcs transition to the new layout.\r\n        if (root !== p) enterArc = insideArc, exitArc = outsideArc, outsideAngle.range([p.x, p.x + p.dx]);\r\n\r\n        var that = this;\r\n        d3.transition().duration(d3.event.altKey ? 7500 : 750).each(function () {\r\n            that.path.exit().transition()\r\n                .style(\"fill-opacity\", function (d) {\r\n                    return d.depth === 1 + (root === p) ? 1 : 0;\r\n                })\r\n                .attrTween(\"d\", function (d) {\r\n                    return arcTween.call(this, exitArc(d));\r\n                })\r\n                .remove();\r\n\r\n            that.path.enter().append(\"path\")\r\n                .style(\"fill-opacity\", function (d) {\r\n                    return d.depth === 2 - (root === p) ? 1 : 0;\r\n                })\r\n                .style(\"fill\", function (d) {\r\n                    return d.fill;\r\n                })\r\n                .on(\"click\", that.zoomIn.bind(that))\r\n                .each(function (d) {\r\n                    this._current = enterArc(d);\r\n                });\r\n\r\n            that.path.on('mouseover', that.tip.show)\r\n                .on('mouseout', that.tip.hide);\r\n\r\n            that.path.transition()\r\n                .style(\"fill-opacity\", 1)\r\n                .attrTween(\"d\", function (d) {\r\n                    return arcTween.call(this, updateArc(d));\r\n                });\r\n        });\r\n\r\n        function arcTween(b) {\r\n            var i = d3.interpolate(this._current, b);\r\n            this._current = i(0);\r\n            return function (t) {\r\n                return that.arc(i(t));\r\n            };\r\n        }\r\n\r\n        function updateArc(d) {\r\n            return {depth: d.depth, x: d.x, dx: d.dx};\r\n        }\r\n    },\r\n\r\n    update: function(){\r\n        var that = this;\r\n\r\n        function fill(d) {\r\n            var p = d;\r\n            while (p.depth > 1) p = p.parent;\r\n            var c = d3.lab(that.hue(p.name));\r\n            c.l = that.luminance(d.size);\r\n            return c;\r\n        }\r\n        function updateArc(d) {\r\n            return {depth: d.depth, x: d.x, dx: d.dx};\r\n        }\r\n\r\n        this.partition\r\n            .nodes(this.root)\r\n            .forEach(function (d) {\r\n                d._children = d.__children;\r\n            });\r\n        this.partition.children(function (d) {   //make sure to update all children in the next step\r\n            return d._children;\r\n        });\r\n        this.partition.nodes(this.root)\r\n            .forEach(function (d) {\r\n                d.fill = fill(d)\r\n            });\r\n        this.partition.children(function (d, depth) {\r\n            return depth < 2 ? d._children : null;  //reset to only show two inner circles\r\n        });\r\n\r\n        this.path = this.path.data(this.partition.nodes(this.root).slice(1), function (d) {\r\n            return d.key;\r\n        });\r\n\r\n        this.path.enter().append(\"path\")\r\n            .attr(\"d\", this.arc)\r\n            .on(\"click\", this.zoomIn.bind(this));\r\n\r\n        this.path.attr(\"d\", this.arc)\r\n            .style(\"fill\", function (d) {\r\n                return d.fill;\r\n            })\r\n            .each(function (d) {\r\n                this._current = updateArc(d);\r\n            })\r\n            .on('mouseover', this.tip.show)\r\n            .on('mouseout', this.tip.hide);\r\n\r\n        this.path.exit().remove();\r\n    }\r\n};\r\n\r\nDGraph.Center = function(rootNode, dataRoot, radius, onClick){\r\n\r\n    this.rootNode = rootNode;\r\n    this.dataRoot = dataRoot;\r\n\r\n    this.initialize(radius, onClick);\r\n\r\n};\r\n\r\nDGraph.Center.prototype = {\r\n    constructor: DGraph.Center,\r\n\r\n    initialize: function(radius, onClick){\r\n        this.center = this.rootNode.append(\"circle\")\r\n            .attr(\"r\", radius / 3)\r\n            .on(\"click\", onClick);\r\n\r\n        this.center.append(\"title\")\r\n            .text(\"zoom out\");\r\n\r\n        this.centerFolderName = this.rootNode.append(\"text\")\r\n            .attr(\"class\", \"centerText\")\r\n            .attr(\"id\", \"centerFolderName\");\r\n\r\n        this.centerFolderSize = this.rootNode.append(\"text\")\r\n            .attr(\"class\", \"centerText\")\r\n            .attr(\"id\", \"centerFolderSize\")\r\n            .attr(\"dy\", 28);\r\n\r\n        this.centerLinkGroup = this.rootNode.append(\"g\");\r\n\r\n        this.centerLinkGroup.append('text')\r\n            .attr(\"dy\",48)\r\n            .attr(\"dx\", -75)\r\n            .attr(\"class\", \"centerText\")\r\n            .attr('font-family', 'FontAwesome')\r\n            .text('\\uf08e');\r\n\r\n        this.centerLink = this.centerLinkGroup.append(\"a\")\r\n            .attr(\"target\", \"_blank\");\r\n\r\n        this.centerLink.append(\"text\")\r\n            .attr(\"class\", \"centerText\")\r\n            .attr(\"id\", \"centerLink\")\r\n            .attr(\"dx\", 5)\r\n            .attr(\"dy\", 47)\r\n            .text(\"Open in your Dropbox\");\r\n\r\n        this.update(this.dataRoot);\r\n    },\r\n\r\n    update: function(root){\r\n        this.center.datum(root);\r\n        this.centerFolderName.text(root.name.trunc(20,2));\r\n        this.centerFolderSize.text(getReadableFileSizeString(root.size));\r\n        this.centerLink.attr(\"xlink:href\", \"http://www.dropbox.com/home\"+root.getPath());\r\n    }\r\n};\r\n\r\nfunction getReadableFileSizeString(fileSizeInBytes) {\r\n\r\n    var i = -1;\r\n    var byteUnits = [' kB', ' MB', ' GB', ' TB', 'PB', 'EB', 'ZB', 'YB'];\r\n    do {\r\n        fileSizeInBytes = fileSizeInBytes / 1024;\r\n        i++;\r\n    } while (fileSizeInBytes > 1024);\r\n\r\n    return Math.max(fileSizeInBytes, 0.1).toFixed(1) + byteUnits[i];\r\n}\r\n\r\nmodule.exports = DGraph;","/**\r\n * Created by Johannes on 02.12.2014.\r\n */\r\n\"use strict\";\r\n\r\nvar Tree = require(\"./tree\").Tree,\r\n    DGraph = require(\"./graph\"),\r\n    showError = require(\"./errorHandler\");\r\n\r\nvar client = new Dropbox.Client({ key: \"f629oxf1xdmgu0g\" });\r\nvar graph;\r\n\r\nvar host = \"joplapp.github.io\";\r\nif ((host == window.location.host) && (window.location.protocol != \"https:\")){\r\n    window.location.protocol = \"https\";\r\n}\r\n\r\n$( document ).ready(authenticate);\r\n\r\n$(document).ready(function() {\r\n        $(\"#privacy-policy-link\").click(function (e) {\r\n            $(\"#privacy-policy\").toggle();\r\n\r\n            // stop event and scroll to bottom to make policy visible (yeah we're that transparent!)\r\n            e.preventDefault();\r\n            $(\"html, body\").animate({ scrollTop: $(document).height() }, \"slow\");\r\n        });\r\n});\r\n\r\nfunction authenticate(){\r\n    // Try to use cached credentials.\r\n    client.authenticate({interactive: false}, function(error, client) {\r\n        if (error) {\r\n            return showError(error);\r\n        }\r\n        if (client.isAuthenticated()) {\r\n            // Cached credentials.\r\n            loadGraph();\r\n        } else {\r\n            // show and set up the \"Sign into Dropbox\" button\r\n            $('#dropbox-connect').show();\r\n            $('.btn-dropbox').click(function() {\r\n                client.authenticate(function(error) {\r\n                    if (error) {\r\n                        return showError(error);\r\n                    }\r\n                    loadGraph();\r\n                });\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction loadGraph(){\r\n    $(\"#dropbox-connect\").hide();\r\n    $(\"#progress-box\").show();\r\n    var totalBytes = 0;\r\n\r\n    client.getAccountInfo(function (error, accountInfo) {\r\n        totalBytes = accountInfo.usedQuota;\r\n        console.log(totalBytes);\r\n    });\r\n\r\n    var tree = new Tree(\"home\");\r\n\r\n    loadDelta(tree, undefined, function(){\r\n        setTimeout(function(){\r\n            $(\"#progress-box\").hide();\r\n            $(\"#hint\").show();\r\n            finalizeChart(tree);\r\n        }, 300);\r\n    }, function (currentProgress) {\r\n        if (totalBytes == 0) {\r\n            return;\r\n        }\r\n        if(currentProgress){\r\n            loadChartStep(tree, totalBytes - currentProgress);\r\n        }\r\n        var progress = Math.round(currentProgress * 10000 / totalBytes) / 100;\r\n        $('#progress-bar').text(progress+\"%\");\r\n        $('#progress-bar').css(\"width\",progress+\"%\");\r\n    }, 0, 500000);\r\n}\r\n\r\nvar followPath = function(tree, path, method, attrib){\r\n    var folders = path.split(\"/\");\r\n    var node = tree, newNode;\r\n\r\n    for(var i=1; i<folders.length-1; i++){\r\n        newNode = node.getNode(folders[i]);\r\n        if (!newNode) {\r\n            newNode = node.addNode(folders[i]);\r\n        }\r\n        node = newNode;\r\n    }\r\n\r\n    node[method](folders.pop(), attrib);\r\n};\r\n\r\nvar addFolder = function(tree, path){\r\n    // console.log(path+ \" was added.\");\r\n    followPath(tree, path, \"addNode\");\r\n};\r\nvar addFile = function(tree, path, size){\r\n    // console.log(path+ \" was added.\");\r\n    followPath(tree, path, \"addChild\", size);\r\n};\r\n\r\nvar loadDelta = function (tree, cursor, done, progress, currentBytes, counter) {\r\n    progress(currentBytes);\r\n\r\n    if(counter < 0){\r\n        done();\r\n        return;\r\n    }\r\n    client.delta(cursor, function(err, result){\r\n        if(!result.changes){\r\n            done();\r\n            return;\r\n        }\r\n\r\n        result.changes.forEach(function(item){\r\n            if(item.stat.isFolder) {\r\n                addFolder(tree, item.path)\r\n            } else {\r\n                addFile(tree, item.path, item.stat.size);\r\n                currentBytes += item.stat.size;\r\n            }\r\n        });\r\n        if(result.shouldPullAgain) {\r\n            loadDelta(tree, result.cursorTag, done, progress, currentBytes, counter - result.changes.length)\r\n        } else {\r\n            done();\r\n        }\r\n    })\r\n};\r\n\r\nvar MAX_NUM_LEAVES = 25;\r\n\r\nvar lastTime;\r\nfunction loadChartStep(tree, missingBytes) {\r\n    var now = Date.now();\r\n    if(lastTime && now - lastTime < 100) {  //prevent updating to often\r\n        return;\r\n    }\r\n    lastTime = now;\r\n\r\n    tree.addChild(\"waiting\", missingBytes);  // add additional node with remaining bytes\r\n\r\n    tree.computeSize();\r\n    tree.pruneSmallFiles(MAX_NUM_LEAVES);\r\n    tree.computeSize();\r\n    tree.publishChildren();\r\n\r\n    graph ? graph.update() : (graph = new DGraph(tree));\r\n\r\n    tree.removeChild(\"waiting\", missingBytes);\r\n}\r\n\r\nfunction finalizeChart(tree){\r\n    tree.computeSize();\r\n    tree.pruneSmallFiles(MAX_NUM_LEAVES);\r\n    tree.computeSize();\r\n    tree.publishChildren();\r\n\r\n    graph ? graph.update() : (graph = new DGraph(tree));\r\n}\r\n\r\nString.prototype.trunc = function(n, endCharsToShow){\r\n    endCharsToShow = endCharsToShow || 0;\r\n\r\n    return this.length>n ? this.substr(0,n-(1+endCharsToShow))+'\\u2026' + this.substr(-endCharsToShow, endCharsToShow): this;\r\n};","/**\r\n * Created by Johannes on 02.12.2014.\r\n */\r\n\"use strict\";\r\n\r\nvar uniqueItemId = 0;\r\n\r\nvar Leaf = function(name, size){\r\n    this.name = name;\r\n    this.size = size;\r\n    this.key = uniqueItemId++;\r\n};\r\n\r\nvar Tree = function(name){\r\n    this.__children = [];\r\n    this.leaves = [];\r\n    this.dict = {};\r\n    this.name = name;\r\n    this.size = 0;\r\n    this.key = uniqueItemId++;\r\n\r\n    this.__removedSmallChildren = [];\r\n    this.__smallChildrenContainer = null;\r\n};\r\n\r\nTree.prototype.getPath = function(){\r\n    if(this.parent){\r\n        console.log(\"bla: \"+this.parent.getPath() + \"/\" + this.name);\r\n        return this.parent.getPath() + \"/\" + this.name;\r\n    }else{\r\n        return \"\";\r\n    }\r\n};\r\n\r\nTree.prototype.addNode = function(name){\r\n    var node = new Tree(name);\r\n    this.__children.push(node);\r\n    this.dict[name] = node;\r\n\r\n    return node;\r\n};\r\n\r\nTree.prototype.addChild = function(name, size){\r\n    var leaf = new Leaf(name, size);\r\n    this.__children.push(leaf);\r\n    this.leaves.push(leaf);\r\n\r\n    return leaf;\r\n};\r\n\r\nTree.prototype.removeChild = function(name){\r\n    var child;\r\n    this.__children.forEach(function(c){\r\n        if(c.name == name){\r\n            child = c;\r\n        }\r\n    });\r\n\r\n    if(child){\r\n        this.__children.splice(this.__children.indexOf(child), 1);\r\n        this.leaves.splice(this.leaves.indexOf(child), 1);\r\n    }\r\n};\r\n\r\nTree.prototype.getXLargestChildrenSize = function(childIndex){\r\n    var sizes = this.leaves.map(function(leaf){\r\n        return leaf.size;\r\n    });\r\n\r\n    var compf = function(a, b){\r\n        return a == b ? 0:\r\n            a > b ? -1 : 1\r\n    };\r\n    sizes = sizes.sort(compf);\r\n\r\n    return sizes.length > childIndex ? sizes[childIndex] : 0;\r\n};\r\n\r\nTree.prototype.getNode = function(name){\r\n    return this.dict[name];\r\n};\r\n\r\nTree.prototype.computeSize = function(){\r\n\r\n    var size = 0;\r\n    this.__children.forEach(function(child){\r\n        if(child instanceof Leaf){\r\n            size += child.size;\r\n        } else {\r\n            size += child.computeSize();\r\n        }\r\n    });\r\n\r\n    this.size = size;\r\n    return size;\r\n};\r\n\r\n\r\nTree.prototype.publishChildren = function() {\r\n    this.children = this.__children;\r\n    this.__children.forEach(function (child) {\r\n        if (!(child instanceof Leaf)) {\r\n            child.publishChildren();\r\n        }\r\n    });\r\n};\r\n\r\n// re-add children that might have been deleted during previous runs\r\n// as the tree might have changed\r\n// note: does not go through the tree\r\nTree.prototype.reAddSmallFiles = function(){\r\n    if(this.__removedSmallChildren.length) {\r\n        Array.prototype.push.apply(this.__children, this.__removedSmallChildren);\r\n        Array.prototype.push.apply(this.leaves, this.__removedSmallChildren);\r\n\r\n        this.__removedSmallChildren.length = 0; //clear array\r\n\r\n        // remove previous container\r\n        this.__children.splice(this.__children.indexOf(this.__smallChildrenContainer), 1);\r\n        this.leaves.splice(this.leaves.indexOf(this.__smallChildrenContainer), 1);\r\n    }\r\n};\r\n\r\nTree.prototype.pruneSmallFiles = function(numChildren){\r\n    this.__children.forEach(function(child){\r\n        if(!(child instanceof Leaf)){\r\n            child.pruneSmallFiles(numChildren);\r\n        }\r\n    });\r\n\r\n    this.reAddSmallFiles();\r\n\r\n    var threshold = this.getXLargestChildrenSize(numChildren),\r\n        counter = 0,\r\n        totalSize = 0;\r\n\r\n    for(var i=0; i<this.leaves.length; i++) {\r\n        var item = this.leaves[i];\r\n        if (item.size <= threshold) {\r\n            counter++;\r\n            totalSize += item.size;\r\n\r\n            this.__children.splice(this.__children.indexOf(item), 1);\r\n            this.leaves.splice(i, 1);\r\n\r\n            this.__removedSmallChildren.push(item);\r\n            i--;\r\n        }\r\n    }\r\n\r\n    if(counter){\r\n        this.__smallChildrenContainer = this.addChild(counter+\" small files\", totalSize);\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    Tree: Tree,\r\n    Leaf: Leaf\r\n};"],"sourceRoot":"/source/"}